# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libMatC')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libMatC')
    _libMatC = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libMatC', [dirname(__file__)])
        except ImportError:
            import _libMatC
            return _libMatC
        try:
            _mod = imp.load_module('_libMatC', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libMatC = swig_import_helper()
    del swig_import_helper
else:
    import _libMatC
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def PrinCLT_1(vx, vy, vxy, pEps):
    return _libMatC.PrinCLT_1(vx, vy, vxy, pEps)
PrinCLT_1 = _libMatC.PrinCLT_1

def PrinCLT_2(vx, vy, vxy):
    return _libMatC.PrinCLT_2(vx, vy, vxy)
PrinCLT_2 = _libMatC.PrinCLT_2

def State4C_(Emod, nu, kap, delt, sigEta1_4, ww1_4, MatML, epsL, sigL, ElemStateVarN, ww):
    return _libMatC.State4C_(Emod, nu, kap, delt, sigEta1_4, ww1_4, MatML, epsL, sigL, ElemStateVarN, ww)
State4C_ = _libMatC.State4C_

def State1C_(i, D1, Emod, nu, aect, eta_, delt, xi, fct, alfa, epsct_, sigEta1_1, ww1_1, MatML, epsL, sigL, ElemStateVarN, ww):
    return _libMatC.State1C_(i, D1, Emod, nu, aect, eta_, delt, xi, fct, alfa, epsct_, sigEta1_1, ww1_1, MatML, epsL, sigL, ElemStateVarN, ww)
State1C_ = _libMatC.State1C_

def State2C_(D2_1, Emod, nu, eta_2, beta1, delt, xi, sigEta1_2, ww1_2, MatML, epsL, sigL, ww):
    return _libMatC.State2C_(D2_1, Emod, nu, eta_2, beta1, delt, xi, sigEta1_2, ww1_2, MatML, epsL, sigL, ww)
State2C_ = _libMatC.State2C_

def State3C_(Emod, nu, MatML, epsL, sigL, ww):
    return _libMatC.State3C_(Emod, nu, MatML, epsL, sigL, ww)
State3C_ = _libMatC.State3C_

def state4C2_(ww2_4, MatML, sigL, ElemStateVarN, ww):
    return _libMatC.state4C2_(ww2_4, MatML, sigL, ElemStateVarN, ww)
state4C2_ = _libMatC.state4C2_

def State1C2_(D1, Emod, aect, eta_, fct, alfa, sigEta2_1, ww2_1, MatML, epsL, sigL, ElemStateVarN, ww):
    return _libMatC.State1C2_(D1, Emod, aect, eta_, fct, alfa, sigEta2_1, ww2_1, MatML, epsL, sigL, ElemStateVarN, ww)
State1C2_ = _libMatC.State1C2_

def State2C2_(nu, D2_2, eta_2, beta2, sigEta2_2, ww2_2, MatML, epsL, sigL, ww):
    return _libMatC.State2C2_(nu, D2_2, eta_2, beta2, sigEta2_2, ww2_2, MatML, epsL, sigL, ww)
State2C2_ = _libMatC.State2C2_

def State3C2_(Emod, MatML, epsL, sigL, ww):
    return _libMatC.State3C2_(Emod, MatML, epsL, sigL, ww)
State3C2_ = _libMatC.State3C2_

def ElasticLTC1(ElemDim, ElemPlSt, ElemLch, ElemStateVar, ElemStateVarN, ElemDataP, selfEmod, selfnu, selfEpsct, selfwcr, selfbw, selfCrackVisc, selffct, Eps, sig, MatM, ww):
    return _libMatC.ElasticLTC1(ElemDim, ElemPlSt, ElemLch, ElemStateVar, ElemStateVarN, ElemDataP, selfEmod, selfnu, selfEpsct, selfwcr, selfbw, selfCrackVisc, selffct, Eps, sig, MatM, ww)
ElasticLTC1 = _libMatC.ElasticLTC1

def eighC(I1, J2, Eps, la, vv):
    return _libMatC.eighC(I1, J2, Eps, la, vv)
eighC = _libMatC.eighC

def EquivStrain1C(I1, J2, J2S, Eps, EpsD, kap_, nd, Hd, cc0, cc1, cc2, cc3, data):
    return _libMatC.EquivStrain1C(I1, J2, J2S, Eps, EpsD, kap_, nd, Hd, cc0, cc1, cc2, cc3, data)
EquivStrain1C = _libMatC.EquivStrain1C

def eighC2(I1, J2D, Eps, la, vv):
    return _libMatC.eighC2(I1, J2D, Eps, la, vv)
eighC2 = _libMatC.eighC2

def ViscExten3DC1(Dt, eta, Dps, ElemStateVar, ElemStateVarN, sI, Veps):
    return _libMatC.ViscExten3DC1(Dt, eta, Dps, ElemStateVar, ElemStateVarN, sI, Veps)
ViscExten3DC1 = _libMatC.ViscExten3DC1

def IsoDamC1(ElemDim, ElemPlSt, ElemLch, ElemStateVar, ElemStateVarN, Eps, sig, MatM, LiTy, cc0, cc1, cc2, cc3, RType, EpsR, kapStrength, ElemCrBws, gam2, kapUlt, edt, ed, gd, nu, Emod, Dps, eta, RegPar, sigR, CR, Dt, sVsTol, DataOut):
    return _libMatC.IsoDamC1(ElemDim, ElemPlSt, ElemLch, ElemStateVar, ElemStateVarN, Eps, sig, MatM, LiTy, cc0, cc1, cc2, cc3, RType, EpsR, kapStrength, ElemCrBws, gam2, kapUlt, edt, ed, gd, nu, Emod, Dps, eta, RegPar, sigR, CR, Dt, sVsTol, DataOut)
IsoDamC1 = _libMatC.IsoDamC1
# This file is compatible with both classic and new-style classes.


